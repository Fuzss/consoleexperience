buildscript {

    repositories {

        jcenter()
        mavenCentral()
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
    }

    dependencies {

        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'

// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

import net.minecraftforge.gradle.common.task.SignJar

apply plugin: 'org.spongepowered.mixin'

version = "${mod_version}"
group = "${mod_group}"
archivesBaseName = "${mod_id}"

ext {

    // custom properties
    name = "${mod_name}"
    author = "${mod_author}"
    description = "${mod_description}"
    url = "${mod_url}"
    loader = "${loader_version.replaceAll("\\..*", "")}"
    forge = "${forge_version}"
    mc = "${mc_version}"
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {

    mappings channel: "${mcp_channel}", version: "${mcp_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {

        client { workingDirectory = project.file('run') }
        server { workingDirectory = project.file('run') }
    }
}

repositories {

    // unofficial mcp mappings
    maven { url = "http://dogforce-games.com/maven/" }
}

dependencies {

    minecraft "net.minecraftforge:forge:${project.ext.mc}-${loader_version}"
}

mixin {

    add sourceSets.main, "${project.archivesBaseName}.refmap.json"
}

processResources {

    // this will ensure that this task is redone when the versions change.
    inputs.property "mod_id", project.archivesBaseName
    inputs.property "mod_name", project.ext.name
    inputs.property "mod_name2", project.ext.name.replaceAll("\\s", "")
    inputs.property "mod_version", project.version
    inputs.property "mod_group", project.group
    inputs.property "mod_url", project.ext.url
    inputs.property "mod_description", project.ext.description
    inputs.property "mod_author", project.ext.author
    inputs.property "loader_version", project.ext.loader
    inputs.property "forge_version", project.ext.forge
    inputs.property "mc_version", project.ext.mc

    // replace stuff in mods.toml and pack.mcmeta
    from(sourceSets.main.resources.srcDirs) {

        include 'META-INF/mods.toml', 'META-INF/mixins.json', 'META-INF/MANIFEST.MF', 'pack.mcmeta'

        expand (

                'mod_id': project.archivesBaseName,
                'mod_name': project.ext.name,
                'mod_name2': project.ext.name.replaceAll("\\s", ""),
                'mod_version': project.version,
                'mod_group': project.group,
                'mod_url': project.ext.url,
                'mod_description': project.ext.description,
                'mod_author': project.ext.author,
                'loader_version': project.ext.loader,
                'forge_version': project.ext.forge,
                'mc_version': project.ext.mc
        )
    }

    // copy everything else except mods.toml and pack.mcmeta
    from(sourceSets.main.resources.srcDirs) {

        exclude 'META-INF/mods.toml', 'META-INF/mixins.json', 'META-INF/MANIFEST.MF', 'pack.mcmeta'
    }
}

jar {

    manifest {

        attributes([

                "Specification-Title"       : project.name,
                "Specification-Version"     : project.version,
                "Specification-Vendor"      : project.ext.author.toLowerCase(),
                "Implementation-Title"      : project.name,
                "Implementation-Version"    : project.version,
                "Implementation-Vendor"     : project.ext.author.toLowerCase(),
                "Implementation-Vendor-Id"  : project.group,
                "Implementation-URL"        : project.ext.url,
                "Implementation-Timestamp"  : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConnector"            : "${project.group}.mixin.${project.ext.name.replaceAll("\\s", "")}Connector"
        ])
    }

    archiveName "${project.ext.name.replaceAll("\\s", "")}-v${mod_version}-${mc_version}.jar" // use archiveFileName in the future
}

// seems to work ok for now, but Forge currently doesn't use the key anyways
task signJar(type: SignJar, dependsOn: jar) {

    onlyIf {

        project.hasProperty('keyStore')
    }

    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('alias')
    storePass = project.findProperty('storePass')
    keyPass = project.findProperty('keyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

build.dependsOn signJar